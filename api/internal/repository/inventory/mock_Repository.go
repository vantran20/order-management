// Code generated by mockery v2.45.1. DO NOT EDIT.

package inventory

import (
	context "context"
	model "omg/api/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) CreateOrder(_a0 context.Context, _a1 model.Order) (model.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) (model.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) model.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderItem provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) CreateOrderItem(_a0 context.Context, _a1 model.OrderItem) (model.OrderItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItem")
	}

	var r0 model.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItem) (model.OrderItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItem) model.OrderItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderItem) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) CreateProduct(_a0 context.Context, _a1 model.Product) (model.Product, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) (model.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) model.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Product) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetOrderByID(_a0 context.Context, _a1 int64) (model.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetProductByID(_a0 context.Context, _a1 int64) (model.Product, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByName provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetProductByName(_a0 context.Context, _a1 string) (model.Product, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByName")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: _a0
func (_m *MockRepository) ListProducts(_a0 context.Context) ([]model.Product, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) UpdateOrder(_a0 context.Context, _a1 model.Order) (model.Order, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) (model.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) model.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderItem provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) UpdateOrderItem(_a0 context.Context, _a1 model.OrderItem) (model.OrderItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderItem")
	}

	var r0 model.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItem) (model.OrderItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderItem) model.OrderItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderItem) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) UpdateProduct(_a0 context.Context, _a1 model.Product) (model.Product, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) (model.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) model.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Product) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
